directive @SQL(order: Int, query: SqlQueryParams, mutation: SqlMutationParams) on OBJECT

directive @SQL_GORM(value: String) on FIELD_DEFINITION

directive @SQL_INDEX on FIELD_DEFINITION

directive @SQL_PRIMARY on FIELD_DEFINITION

directive @SQL_SKIP_MUTATION on FIELD_DEFINITION

"""
The @specifiedBy built-in directive is used within the type system definition
language to provide a scalar specification URL for specifying the behavior of
custom scalar types.
"""
directive @specifiedBy(url: String!) on SCALAR

type AddCatPayload {
  cat(filter: CatFiltersInput, order: CatOrder, first: Int, offset: Int): CatQueryResult!
}

type AddCompanyPayload {
  company(filter: CompanyFiltersInput, order: CompanyOrder, first: Int, offset: Int): CompanyQueryResult!
}

type AddTodoPayload {
  todo(filter: TodoFiltersInput, order: TodoOrder, first: Int, offset: Int): TodoQueryResult!
}

type AddUserPayload {
  user(filter: UserFiltersInput, order: UserOrder, first: Int, offset: Int): UserQueryResult!
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  is: Boolean
  null: Boolean
  notNull: Boolean
}

type Cat {
  id: ID!
  name: String!
  birthDay: Time!
  age: Int
  userID: Int!
  alive: Boolean
}

input CatFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  birthDay: TimeFilterInput
  userID: IntFilterInput
  alive: BooleanFilterInput
  and: [CatFiltersInput]
  or: [CatFiltersInput]
  not: CatFiltersInput
}

input CatInput {
  name: String!
  birthDay: Time!
  userID: Int!
  alive: Boolean
}

input CatOrder {
  asc: CatOrderable
  desc: CatOrderable
}

enum CatOrderable {
  id
  name
  userID
  alive
}

input CatPatch {
  name: String
  birthDay: Time
  userID: Int
  alive: Boolean
}

type CatQueryResult {
  data: [Cat!]!
  count: Int!
  totalCount: Int!
}

type Company {
  id: ID!
  name: String!
  description: String
  motherCompanyID: Int
  motherCompany: Company
  createdAt: Time
}

input CompanyFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  motherCompanyID: IntFilterInput
  motherCompany: CompanyFiltersInput
  createdAt: TimeFilterInput
  and: [CompanyFiltersInput]
  or: [CompanyFiltersInput]
  not: CompanyFiltersInput
}

input CompanyInput {
  name: String!
  description: String
  motherCompanyID: Int
  motherCompany: CompanyInput
}

input CompanyOrder {
  asc: CompanyOrderable
  desc: CompanyOrderable
}

enum CompanyOrderable {
  id
  name
  description
  motherCompanyID
}

input CompanyPatch {
  name: String
  description: String
  motherCompanyID: Int
  motherCompany: CompanyPatch
}

type CompanyQueryResult {
  data: [Company!]!
  count: Int!
  totalCount: Int!
}

type DeleteCatPayload {
  cat(filter: CatFiltersInput, order: CatOrder, first: Int, offset: Int): CatQueryResult!
  count: Int!
  msg: String
}

type DeleteCompanyPayload {
  company(filter: CompanyFiltersInput, order: CompanyOrder, first: Int, offset: Int): CompanyQueryResult!
  count: Int!
  msg: String
}

type DeleteTodoPayload {
  todo(filter: TodoFiltersInput, order: TodoOrder, first: Int, offset: Int): TodoQueryResult!
  count: Int!
  msg: String
}

type DeleteUserPayload {
  user(filter: UserFiltersInput, order: UserOrder, first: Int, offset: Int): UserQueryResult!
  count: Int!
  msg: String
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  ne: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notin: [ID]
}

input IntFilterBetween {
  start: Int!
  end: Int!
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: IntFilterBetween
}

type Mutation {
  addCat(input: [CatInput!]!): AddCatPayload
  updateCat(input: UpdateCatInput!): UpdateCatPayload
  deleteCat(filter: CatFiltersInput!): DeleteCatPayload
  addCompany(input: [CompanyInput!]!): AddCompanyPayload
  updateCompany(input: UpdateCompanyInput!): UpdateCompanyPayload
  deleteCompany(filter: CompanyFiltersInput!): DeleteCompanyPayload
  addUser2Todos(input: UserRef2TodosInput!): UpdateTodoPayload
  addTodo(input: [TodoInput!]!): AddTodoPayload
  updateTodo(input: UpdateTodoInput!): UpdateTodoPayload
  deleteTodo(filter: TodoFiltersInput!): DeleteTodoPayload
  addUser(input: [UserInput!]!): AddUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  deleteUser(filter: UserFiltersInput!): DeleteUserPayload
}

type Query {
  getCat(id: ID!): Cat
  queryCat(filter: CatFiltersInput, order: CatOrder, first: Int, offset: Int): CatQueryResult
  getCompany(id: ID!): Company
  queryCompany(filter: CompanyFiltersInput, order: CompanyOrder, first: Int, offset: Int): CompanyQueryResult
  getTodo(id: ID!): Todo
  queryTodo(filter: TodoFiltersInput, order: TodoOrder, first: Int, offset: Int): TodoQueryResult
  getUser(id: ID!): User
  queryUser(filter: UserFiltersInput, order: UserOrder, first: Int, offset: Int): UserQueryResult
}

input SqlCreateExtension {
  value: Boolean!
  directiveExt: [String!]
}

input SqlMutationParams {
  add: SqlCreateExtension
  update: SqlCreateExtension
  delete: SqlCreateExtension
  directiveExt: [String!]
}

input SqlQueryParams {
  get: SqlCreateExtension
  query: SqlCreateExtension
  directiveExt: [String!]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
}

scalar Test

scalar Time

input TimeFilterBetween {
  start: Time!
  end: Time!
}

input TimeFilterInput {
  and: [Time]
  or: [Time]
  not: TimeFilterInput
  eq: Time
  ne: Time
  gt: Time
  gte: Time
  lt: Time
  lte: Time
  null: Boolean
  notNull: Boolean
  in: [Time]
  notIn: [Time]
  between: TimeFilterBetween
}

type Todo {
  id: ID!
  name: String!
  users: [User!]!
  owner: User!
  ownerID: ID!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  etype1: TodoType
  etype5: TodoType!
  test123: Test
}

input TodoFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  users: UserFiltersInput
  owner: UserFiltersInput
  ownerID: IDFilterInput
  createdAt: TimeFilterInput
  updatedAt: TimeFilterInput
  deletedAt: TimeFilterInput
  and: [TodoFiltersInput]
  or: [TodoFiltersInput]
  not: TodoFiltersInput
}

input TodoInput {
  name: String!
  etype1: TodoType
  etype5: TodoType!
  test123: Test
}

input TodoOrder {
  asc: TodoOrderable
  desc: TodoOrderable
}

enum TodoOrderable {
  id
  name
  ownerID
}

input TodoPatch {
  name: String
  etype1: TodoType
  etype5: TodoType
  test123: Test
}

type TodoQueryResult {
  data: [Todo!]!
  count: Int!
  totalCount: Int!
}

enum TodoType {
  Bug
  Feature
}

input UpdateCatInput {
  filter: CatFiltersInput!
  set: CatPatch!
}

type UpdateCatPayload {
  cat(filter: CatFiltersInput, order: CatOrder, first: Int, offset: Int): CatQueryResult!
  count: Int!
}

input UpdateCompanyInput {
  filter: CompanyFiltersInput!
  set: CompanyPatch!
}

type UpdateCompanyPayload {
  company(filter: CompanyFiltersInput, order: CompanyOrder, first: Int, offset: Int): CompanyQueryResult!
  count: Int!
}

input UpdateTodoInput {
  filter: TodoFiltersInput!
  set: TodoPatch!
}

type UpdateTodoPayload {
  todo(filter: TodoFiltersInput, order: TodoOrder, first: Int, offset: Int): TodoQueryResult!
  count: Int!
}

input UpdateUserInput {
  filter: UserFiltersInput!
  set: UserPatch!
}

type UpdateUserPayload {
  user(filter: UserFiltersInput, order: UserOrder, first: Int, offset: Int): UserQueryResult!
  count: Int!
}

type User {
  id: ID!
  name: String!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  cat: Cat
  companyID: Int
  company: Company
}

input UserFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  createdAt: TimeFilterInput
  updatedAt: TimeFilterInput
  deletedAt: TimeFilterInput
  cat: CatFiltersInput
  companyID: IntFilterInput
  company: CompanyFiltersInput
  and: [UserFiltersInput]
  or: [UserFiltersInput]
  not: UserFiltersInput
}

input UserInput {
  name: String!
  cat: CatInput
  companyID: Int
  company: CompanyInput
}

input UserOrder {
  asc: UserOrderable
  desc: UserOrderable
}

enum UserOrderable {
  id
  name
  companyID
}

input UserPatch {
  name: String
  cat: CatPatch
  companyID: Int
  company: CompanyPatch
}

type UserQueryResult {
  data: [User!]!
  count: Int!
  totalCount: Int!
}

input UserRef2TodosInput {
  filter: TodoFiltersInput!
  set: [ID!]!
}

