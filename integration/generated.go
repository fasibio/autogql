// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package integration

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
)

type DirectiveLocation string

const (
	DirectiveLocationQuery                DirectiveLocation = "QUERY"
	DirectiveLocationMutation             DirectiveLocation = "MUTATION"
	DirectiveLocationSubscription         DirectiveLocation = "SUBSCRIPTION"
	DirectiveLocationField                DirectiveLocation = "FIELD"
	DirectiveLocationFragmentDefinition   DirectiveLocation = "FRAGMENT_DEFINITION"
	DirectiveLocationFragmentSpread       DirectiveLocation = "FRAGMENT_SPREAD"
	DirectiveLocationInlineFragment       DirectiveLocation = "INLINE_FRAGMENT"
	DirectiveLocationVariableDefinition   DirectiveLocation = "VARIABLE_DEFINITION"
	DirectiveLocationSchema               DirectiveLocation = "SCHEMA"
	DirectiveLocationScalar               DirectiveLocation = "SCALAR"
	DirectiveLocationObject               DirectiveLocation = "OBJECT"
	DirectiveLocationFieldDefinition      DirectiveLocation = "FIELD_DEFINITION"
	DirectiveLocationArgumentDefinition   DirectiveLocation = "ARGUMENT_DEFINITION"
	DirectiveLocationInterface            DirectiveLocation = "INTERFACE"
	DirectiveLocationUnion                DirectiveLocation = "UNION"
	DirectiveLocationEnum                 DirectiveLocation = "ENUM"
	DirectiveLocationEnumValue            DirectiveLocation = "ENUM_VALUE"
	DirectiveLocationInputObject          DirectiveLocation = "INPUT_OBJECT"
	DirectiveLocationInputFieldDefinition DirectiveLocation = "INPUT_FIELD_DEFINITION"
)

// FullType includes the GraphQL fields of __Type requested by the fragment FullType.
type FullType struct {
	Kind          TypeKind                        `json:"kind"`
	Name          string                          `json:"name"`
	Description   string                          `json:"description"`
	Fields        []FullTypeFieldsField           `json:"fields"`
	InputFields   []FullTypeInputFieldsInputValue `json:"inputFields"`
	Interfaces    []FullTypeInterfacesType        `json:"interfaces"`
	EnumValues    []FullTypeEnumValuesEnumValue   `json:"enumValues"`
	PossibleTypes []FullTypePossibleTypesType     `json:"possibleTypes"`
}

// GetKind returns FullType.Kind, and is useful for accessing the field via an interface.
func (v *FullType) GetKind() TypeKind { return v.Kind }

// GetName returns FullType.Name, and is useful for accessing the field via an interface.
func (v *FullType) GetName() string { return v.Name }

// GetDescription returns FullType.Description, and is useful for accessing the field via an interface.
func (v *FullType) GetDescription() string { return v.Description }

// GetFields returns FullType.Fields, and is useful for accessing the field via an interface.
func (v *FullType) GetFields() []FullTypeFieldsField { return v.Fields }

// GetInputFields returns FullType.InputFields, and is useful for accessing the field via an interface.
func (v *FullType) GetInputFields() []FullTypeInputFieldsInputValue { return v.InputFields }

// GetInterfaces returns FullType.Interfaces, and is useful for accessing the field via an interface.
func (v *FullType) GetInterfaces() []FullTypeInterfacesType { return v.Interfaces }

// GetEnumValues returns FullType.EnumValues, and is useful for accessing the field via an interface.
func (v *FullType) GetEnumValues() []FullTypeEnumValuesEnumValue { return v.EnumValues }

// GetPossibleTypes returns FullType.PossibleTypes, and is useful for accessing the field via an interface.
func (v *FullType) GetPossibleTypes() []FullTypePossibleTypesType { return v.PossibleTypes }

// FullTypeEnumValuesEnumValue includes the requested fields of the GraphQL type __EnumValue.
type FullTypeEnumValuesEnumValue struct {
	Name              string `json:"name"`
	Description       string `json:"description"`
	IsDeprecated      bool   `json:"isDeprecated"`
	DeprecationReason string `json:"deprecationReason"`
}

// GetName returns FullTypeEnumValuesEnumValue.Name, and is useful for accessing the field via an interface.
func (v *FullTypeEnumValuesEnumValue) GetName() string { return v.Name }

// GetDescription returns FullTypeEnumValuesEnumValue.Description, and is useful for accessing the field via an interface.
func (v *FullTypeEnumValuesEnumValue) GetDescription() string { return v.Description }

// GetIsDeprecated returns FullTypeEnumValuesEnumValue.IsDeprecated, and is useful for accessing the field via an interface.
func (v *FullTypeEnumValuesEnumValue) GetIsDeprecated() bool { return v.IsDeprecated }

// GetDeprecationReason returns FullTypeEnumValuesEnumValue.DeprecationReason, and is useful for accessing the field via an interface.
func (v *FullTypeEnumValuesEnumValue) GetDeprecationReason() string { return v.DeprecationReason }

// FullTypeFieldsField includes the requested fields of the GraphQL type __Field.
type FullTypeFieldsField struct {
	Name              string                              `json:"name"`
	Description       string                              `json:"description"`
	Args              []FullTypeFieldsFieldArgsInputValue `json:"args"`
	Type              FullTypeFieldsFieldType             `json:"type"`
	IsDeprecated      bool                                `json:"isDeprecated"`
	DeprecationReason string                              `json:"deprecationReason"`
}

// GetName returns FullTypeFieldsField.Name, and is useful for accessing the field via an interface.
func (v *FullTypeFieldsField) GetName() string { return v.Name }

// GetDescription returns FullTypeFieldsField.Description, and is useful for accessing the field via an interface.
func (v *FullTypeFieldsField) GetDescription() string { return v.Description }

// GetArgs returns FullTypeFieldsField.Args, and is useful for accessing the field via an interface.
func (v *FullTypeFieldsField) GetArgs() []FullTypeFieldsFieldArgsInputValue { return v.Args }

// GetType returns FullTypeFieldsField.Type, and is useful for accessing the field via an interface.
func (v *FullTypeFieldsField) GetType() FullTypeFieldsFieldType { return v.Type }

// GetIsDeprecated returns FullTypeFieldsField.IsDeprecated, and is useful for accessing the field via an interface.
func (v *FullTypeFieldsField) GetIsDeprecated() bool { return v.IsDeprecated }

// GetDeprecationReason returns FullTypeFieldsField.DeprecationReason, and is useful for accessing the field via an interface.
func (v *FullTypeFieldsField) GetDeprecationReason() string { return v.DeprecationReason }

// FullTypeFieldsFieldArgsInputValue includes the requested fields of the GraphQL type __InputValue.
type FullTypeFieldsFieldArgsInputValue struct {
	InputValue `json:"-"`
}

// GetName returns FullTypeFieldsFieldArgsInputValue.Name, and is useful for accessing the field via an interface.
func (v *FullTypeFieldsFieldArgsInputValue) GetName() string { return v.InputValue.Name }

// GetDescription returns FullTypeFieldsFieldArgsInputValue.Description, and is useful for accessing the field via an interface.
func (v *FullTypeFieldsFieldArgsInputValue) GetDescription() string { return v.InputValue.Description }

// GetType returns FullTypeFieldsFieldArgsInputValue.Type, and is useful for accessing the field via an interface.
func (v *FullTypeFieldsFieldArgsInputValue) GetType() InputValueType { return v.InputValue.Type }

// GetDefaultValue returns FullTypeFieldsFieldArgsInputValue.DefaultValue, and is useful for accessing the field via an interface.
func (v *FullTypeFieldsFieldArgsInputValue) GetDefaultValue() string {
	return v.InputValue.DefaultValue
}

func (v *FullTypeFieldsFieldArgsInputValue) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FullTypeFieldsFieldArgsInputValue
		graphql.NoUnmarshalJSON
	}
	firstPass.FullTypeFieldsFieldArgsInputValue = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InputValue)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFullTypeFieldsFieldArgsInputValue struct {
	Name string `json:"name"`

	Description string `json:"description"`

	Type InputValueType `json:"type"`

	DefaultValue string `json:"defaultValue"`
}

func (v *FullTypeFieldsFieldArgsInputValue) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FullTypeFieldsFieldArgsInputValue) __premarshalJSON() (*__premarshalFullTypeFieldsFieldArgsInputValue, error) {
	var retval __premarshalFullTypeFieldsFieldArgsInputValue

	retval.Name = v.InputValue.Name
	retval.Description = v.InputValue.Description
	retval.Type = v.InputValue.Type
	retval.DefaultValue = v.InputValue.DefaultValue
	return &retval, nil
}

// FullTypeFieldsFieldType includes the requested fields of the GraphQL type __Type.
type FullTypeFieldsFieldType struct {
	TypeRef `json:"-"`
}

// GetKind returns FullTypeFieldsFieldType.Kind, and is useful for accessing the field via an interface.
func (v *FullTypeFieldsFieldType) GetKind() TypeKind { return v.TypeRef.Kind }

// GetName returns FullTypeFieldsFieldType.Name, and is useful for accessing the field via an interface.
func (v *FullTypeFieldsFieldType) GetName() string { return v.TypeRef.Name }

// GetOfType returns FullTypeFieldsFieldType.OfType, and is useful for accessing the field via an interface.
func (v *FullTypeFieldsFieldType) GetOfType() TypeRefOfType { return v.TypeRef.OfType }

func (v *FullTypeFieldsFieldType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FullTypeFieldsFieldType
		graphql.NoUnmarshalJSON
	}
	firstPass.FullTypeFieldsFieldType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TypeRef)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFullTypeFieldsFieldType struct {
	Kind TypeKind `json:"kind"`

	Name string `json:"name"`

	OfType TypeRefOfType `json:"ofType"`
}

func (v *FullTypeFieldsFieldType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FullTypeFieldsFieldType) __premarshalJSON() (*__premarshalFullTypeFieldsFieldType, error) {
	var retval __premarshalFullTypeFieldsFieldType

	retval.Kind = v.TypeRef.Kind
	retval.Name = v.TypeRef.Name
	retval.OfType = v.TypeRef.OfType
	return &retval, nil
}

// FullTypeInputFieldsInputValue includes the requested fields of the GraphQL type __InputValue.
type FullTypeInputFieldsInputValue struct {
	InputValue `json:"-"`
}

// GetName returns FullTypeInputFieldsInputValue.Name, and is useful for accessing the field via an interface.
func (v *FullTypeInputFieldsInputValue) GetName() string { return v.InputValue.Name }

// GetDescription returns FullTypeInputFieldsInputValue.Description, and is useful for accessing the field via an interface.
func (v *FullTypeInputFieldsInputValue) GetDescription() string { return v.InputValue.Description }

// GetType returns FullTypeInputFieldsInputValue.Type, and is useful for accessing the field via an interface.
func (v *FullTypeInputFieldsInputValue) GetType() InputValueType { return v.InputValue.Type }

// GetDefaultValue returns FullTypeInputFieldsInputValue.DefaultValue, and is useful for accessing the field via an interface.
func (v *FullTypeInputFieldsInputValue) GetDefaultValue() string { return v.InputValue.DefaultValue }

func (v *FullTypeInputFieldsInputValue) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FullTypeInputFieldsInputValue
		graphql.NoUnmarshalJSON
	}
	firstPass.FullTypeInputFieldsInputValue = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InputValue)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFullTypeInputFieldsInputValue struct {
	Name string `json:"name"`

	Description string `json:"description"`

	Type InputValueType `json:"type"`

	DefaultValue string `json:"defaultValue"`
}

func (v *FullTypeInputFieldsInputValue) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FullTypeInputFieldsInputValue) __premarshalJSON() (*__premarshalFullTypeInputFieldsInputValue, error) {
	var retval __premarshalFullTypeInputFieldsInputValue

	retval.Name = v.InputValue.Name
	retval.Description = v.InputValue.Description
	retval.Type = v.InputValue.Type
	retval.DefaultValue = v.InputValue.DefaultValue
	return &retval, nil
}

// FullTypeInterfacesType includes the requested fields of the GraphQL type __Type.
type FullTypeInterfacesType struct {
	TypeRef `json:"-"`
}

// GetKind returns FullTypeInterfacesType.Kind, and is useful for accessing the field via an interface.
func (v *FullTypeInterfacesType) GetKind() TypeKind { return v.TypeRef.Kind }

// GetName returns FullTypeInterfacesType.Name, and is useful for accessing the field via an interface.
func (v *FullTypeInterfacesType) GetName() string { return v.TypeRef.Name }

// GetOfType returns FullTypeInterfacesType.OfType, and is useful for accessing the field via an interface.
func (v *FullTypeInterfacesType) GetOfType() TypeRefOfType { return v.TypeRef.OfType }

func (v *FullTypeInterfacesType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FullTypeInterfacesType
		graphql.NoUnmarshalJSON
	}
	firstPass.FullTypeInterfacesType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TypeRef)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFullTypeInterfacesType struct {
	Kind TypeKind `json:"kind"`

	Name string `json:"name"`

	OfType TypeRefOfType `json:"ofType"`
}

func (v *FullTypeInterfacesType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FullTypeInterfacesType) __premarshalJSON() (*__premarshalFullTypeInterfacesType, error) {
	var retval __premarshalFullTypeInterfacesType

	retval.Kind = v.TypeRef.Kind
	retval.Name = v.TypeRef.Name
	retval.OfType = v.TypeRef.OfType
	return &retval, nil
}

// FullTypePossibleTypesType includes the requested fields of the GraphQL type __Type.
type FullTypePossibleTypesType struct {
	TypeRef `json:"-"`
}

// GetKind returns FullTypePossibleTypesType.Kind, and is useful for accessing the field via an interface.
func (v *FullTypePossibleTypesType) GetKind() TypeKind { return v.TypeRef.Kind }

// GetName returns FullTypePossibleTypesType.Name, and is useful for accessing the field via an interface.
func (v *FullTypePossibleTypesType) GetName() string { return v.TypeRef.Name }

// GetOfType returns FullTypePossibleTypesType.OfType, and is useful for accessing the field via an interface.
func (v *FullTypePossibleTypesType) GetOfType() TypeRefOfType { return v.TypeRef.OfType }

func (v *FullTypePossibleTypesType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FullTypePossibleTypesType
		graphql.NoUnmarshalJSON
	}
	firstPass.FullTypePossibleTypesType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TypeRef)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFullTypePossibleTypesType struct {
	Kind TypeKind `json:"kind"`

	Name string `json:"name"`

	OfType TypeRefOfType `json:"ofType"`
}

func (v *FullTypePossibleTypesType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FullTypePossibleTypesType) __premarshalJSON() (*__premarshalFullTypePossibleTypesType, error) {
	var retval __premarshalFullTypePossibleTypesType

	retval.Kind = v.TypeRef.Kind
	retval.Name = v.TypeRef.Name
	retval.OfType = v.TypeRef.OfType
	return &retval, nil
}

// InputValue includes the GraphQL fields of __InputValue requested by the fragment InputValue.
type InputValue struct {
	Name         string         `json:"name"`
	Description  string         `json:"description"`
	Type         InputValueType `json:"type"`
	DefaultValue string         `json:"defaultValue"`
}

// GetName returns InputValue.Name, and is useful for accessing the field via an interface.
func (v *InputValue) GetName() string { return v.Name }

// GetDescription returns InputValue.Description, and is useful for accessing the field via an interface.
func (v *InputValue) GetDescription() string { return v.Description }

// GetType returns InputValue.Type, and is useful for accessing the field via an interface.
func (v *InputValue) GetType() InputValueType { return v.Type }

// GetDefaultValue returns InputValue.DefaultValue, and is useful for accessing the field via an interface.
func (v *InputValue) GetDefaultValue() string { return v.DefaultValue }

// InputValueType includes the requested fields of the GraphQL type __Type.
type InputValueType struct {
	TypeRef `json:"-"`
}

// GetKind returns InputValueType.Kind, and is useful for accessing the field via an interface.
func (v *InputValueType) GetKind() TypeKind { return v.TypeRef.Kind }

// GetName returns InputValueType.Name, and is useful for accessing the field via an interface.
func (v *InputValueType) GetName() string { return v.TypeRef.Name }

// GetOfType returns InputValueType.OfType, and is useful for accessing the field via an interface.
func (v *InputValueType) GetOfType() TypeRefOfType { return v.TypeRef.OfType }

func (v *InputValueType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InputValueType
		graphql.NoUnmarshalJSON
	}
	firstPass.InputValueType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TypeRef)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInputValueType struct {
	Kind TypeKind `json:"kind"`

	Name string `json:"name"`

	OfType TypeRefOfType `json:"ofType"`
}

func (v *InputValueType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InputValueType) __premarshalJSON() (*__premarshalInputValueType, error) {
	var retval __premarshalInputValueType

	retval.Kind = v.TypeRef.Kind
	retval.Name = v.TypeRef.Name
	retval.OfType = v.TypeRef.OfType
	return &retval, nil
}

// IntrospectionQueryResponse is returned by IntrospectionQuery on success.
type IntrospectionQueryResponse struct {
	Schema IntrospectionQuerySchema `json:"__schema"`
}

// GetSchema returns IntrospectionQueryResponse.Schema, and is useful for accessing the field via an interface.
func (v *IntrospectionQueryResponse) GetSchema() IntrospectionQuerySchema { return v.Schema }

// IntrospectionQuerySchema includes the requested fields of the GraphQL type __Schema.
type IntrospectionQuerySchema struct {
	QueryType        IntrospectionQuerySchemaQueryType             `json:"queryType"`
	MutationType     IntrospectionQuerySchemaMutationType          `json:"mutationType"`
	SubscriptionType IntrospectionQuerySchemaSubscriptionType      `json:"subscriptionType"`
	Types            []IntrospectionQuerySchemaTypesType           `json:"types"`
	Directives       []IntrospectionQuerySchemaDirectivesDirective `json:"directives"`
}

// GetQueryType returns IntrospectionQuerySchema.QueryType, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchema) GetQueryType() IntrospectionQuerySchemaQueryType {
	return v.QueryType
}

// GetMutationType returns IntrospectionQuerySchema.MutationType, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchema) GetMutationType() IntrospectionQuerySchemaMutationType {
	return v.MutationType
}

// GetSubscriptionType returns IntrospectionQuerySchema.SubscriptionType, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchema) GetSubscriptionType() IntrospectionQuerySchemaSubscriptionType {
	return v.SubscriptionType
}

// GetTypes returns IntrospectionQuerySchema.Types, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchema) GetTypes() []IntrospectionQuerySchemaTypesType { return v.Types }

// GetDirectives returns IntrospectionQuerySchema.Directives, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchema) GetDirectives() []IntrospectionQuerySchemaDirectivesDirective {
	return v.Directives
}

// IntrospectionQuerySchemaDirectivesDirective includes the requested fields of the GraphQL type __Directive.
type IntrospectionQuerySchemaDirectivesDirective struct {
	Name        string                                                      `json:"name"`
	Description string                                                      `json:"description"`
	Locations   []DirectiveLocation                                         `json:"locations"`
	Args        []IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue `json:"args"`
}

// GetName returns IntrospectionQuerySchemaDirectivesDirective.Name, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaDirectivesDirective) GetName() string { return v.Name }

// GetDescription returns IntrospectionQuerySchemaDirectivesDirective.Description, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaDirectivesDirective) GetDescription() string { return v.Description }

// GetLocations returns IntrospectionQuerySchemaDirectivesDirective.Locations, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaDirectivesDirective) GetLocations() []DirectiveLocation {
	return v.Locations
}

// GetArgs returns IntrospectionQuerySchemaDirectivesDirective.Args, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaDirectivesDirective) GetArgs() []IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue {
	return v.Args
}

// IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue includes the requested fields of the GraphQL type __InputValue.
type IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue struct {
	InputValue `json:"-"`
}

// GetName returns IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue.Name, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue) GetName() string {
	return v.InputValue.Name
}

// GetDescription returns IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue.Description, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue) GetDescription() string {
	return v.InputValue.Description
}

// GetType returns IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue.Type, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue) GetType() InputValueType {
	return v.InputValue.Type
}

// GetDefaultValue returns IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue.DefaultValue, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue) GetDefaultValue() string {
	return v.InputValue.DefaultValue
}

func (v *IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue
		graphql.NoUnmarshalJSON
	}
	firstPass.IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InputValue)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIntrospectionQuerySchemaDirectivesDirectiveArgsInputValue struct {
	Name string `json:"name"`

	Description string `json:"description"`

	Type InputValueType `json:"type"`

	DefaultValue string `json:"defaultValue"`
}

func (v *IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IntrospectionQuerySchemaDirectivesDirectiveArgsInputValue) __premarshalJSON() (*__premarshalIntrospectionQuerySchemaDirectivesDirectiveArgsInputValue, error) {
	var retval __premarshalIntrospectionQuerySchemaDirectivesDirectiveArgsInputValue

	retval.Name = v.InputValue.Name
	retval.Description = v.InputValue.Description
	retval.Type = v.InputValue.Type
	retval.DefaultValue = v.InputValue.DefaultValue
	return &retval, nil
}

// IntrospectionQuerySchemaMutationType includes the requested fields of the GraphQL type __Type.
type IntrospectionQuerySchemaMutationType struct {
	Name string `json:"name"`
}

// GetName returns IntrospectionQuerySchemaMutationType.Name, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaMutationType) GetName() string { return v.Name }

// IntrospectionQuerySchemaQueryType includes the requested fields of the GraphQL type __Type.
type IntrospectionQuerySchemaQueryType struct {
	Name string `json:"name"`
}

// GetName returns IntrospectionQuerySchemaQueryType.Name, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaQueryType) GetName() string { return v.Name }

// IntrospectionQuerySchemaSubscriptionType includes the requested fields of the GraphQL type __Type.
type IntrospectionQuerySchemaSubscriptionType struct {
	Name string `json:"name"`
}

// GetName returns IntrospectionQuerySchemaSubscriptionType.Name, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaSubscriptionType) GetName() string { return v.Name }

// IntrospectionQuerySchemaTypesType includes the requested fields of the GraphQL type __Type.
type IntrospectionQuerySchemaTypesType struct {
	FullType `json:"-"`
}

// GetKind returns IntrospectionQuerySchemaTypesType.Kind, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaTypesType) GetKind() TypeKind { return v.FullType.Kind }

// GetName returns IntrospectionQuerySchemaTypesType.Name, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaTypesType) GetName() string { return v.FullType.Name }

// GetDescription returns IntrospectionQuerySchemaTypesType.Description, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaTypesType) GetDescription() string { return v.FullType.Description }

// GetFields returns IntrospectionQuerySchemaTypesType.Fields, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaTypesType) GetFields() []FullTypeFieldsField {
	return v.FullType.Fields
}

// GetInputFields returns IntrospectionQuerySchemaTypesType.InputFields, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaTypesType) GetInputFields() []FullTypeInputFieldsInputValue {
	return v.FullType.InputFields
}

// GetInterfaces returns IntrospectionQuerySchemaTypesType.Interfaces, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaTypesType) GetInterfaces() []FullTypeInterfacesType {
	return v.FullType.Interfaces
}

// GetEnumValues returns IntrospectionQuerySchemaTypesType.EnumValues, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaTypesType) GetEnumValues() []FullTypeEnumValuesEnumValue {
	return v.FullType.EnumValues
}

// GetPossibleTypes returns IntrospectionQuerySchemaTypesType.PossibleTypes, and is useful for accessing the field via an interface.
func (v *IntrospectionQuerySchemaTypesType) GetPossibleTypes() []FullTypePossibleTypesType {
	return v.FullType.PossibleTypes
}

func (v *IntrospectionQuerySchemaTypesType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*IntrospectionQuerySchemaTypesType
		graphql.NoUnmarshalJSON
	}
	firstPass.IntrospectionQuerySchemaTypesType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.FullType)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalIntrospectionQuerySchemaTypesType struct {
	Kind TypeKind `json:"kind"`

	Name string `json:"name"`

	Description string `json:"description"`

	Fields []FullTypeFieldsField `json:"fields"`

	InputFields []FullTypeInputFieldsInputValue `json:"inputFields"`

	Interfaces []FullTypeInterfacesType `json:"interfaces"`

	EnumValues []FullTypeEnumValuesEnumValue `json:"enumValues"`

	PossibleTypes []FullTypePossibleTypesType `json:"possibleTypes"`
}

func (v *IntrospectionQuerySchemaTypesType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *IntrospectionQuerySchemaTypesType) __premarshalJSON() (*__premarshalIntrospectionQuerySchemaTypesType, error) {
	var retval __premarshalIntrospectionQuerySchemaTypesType

	retval.Kind = v.FullType.Kind
	retval.Name = v.FullType.Name
	retval.Description = v.FullType.Description
	retval.Fields = v.FullType.Fields
	retval.InputFields = v.FullType.InputFields
	retval.Interfaces = v.FullType.Interfaces
	retval.EnumValues = v.FullType.EnumValues
	retval.PossibleTypes = v.FullType.PossibleTypes
	return &retval, nil
}

type TypeKind string

const (
	TypeKindScalar      TypeKind = "SCALAR"
	TypeKindObject      TypeKind = "OBJECT"
	TypeKindInterface   TypeKind = "INTERFACE"
	TypeKindUnion       TypeKind = "UNION"
	TypeKindEnum        TypeKind = "ENUM"
	TypeKindInputObject TypeKind = "INPUT_OBJECT"
	TypeKindList        TypeKind = "LIST"
	TypeKindNonNull     TypeKind = "NON_NULL"
)

// TypeRef includes the GraphQL fields of __Type requested by the fragment TypeRef.
type TypeRef struct {
	Kind   TypeKind      `json:"kind"`
	Name   string        `json:"name"`
	OfType TypeRefOfType `json:"ofType"`
}

// GetKind returns TypeRef.Kind, and is useful for accessing the field via an interface.
func (v *TypeRef) GetKind() TypeKind { return v.Kind }

// GetName returns TypeRef.Name, and is useful for accessing the field via an interface.
func (v *TypeRef) GetName() string { return v.Name }

// GetOfType returns TypeRef.OfType, and is useful for accessing the field via an interface.
func (v *TypeRef) GetOfType() TypeRefOfType { return v.OfType }

// TypeRefOfType includes the requested fields of the GraphQL type __Type.
type TypeRefOfType struct {
	Kind   TypeKind            `json:"kind"`
	Name   string              `json:"name"`
	OfType TypeRefOfTypeOfType `json:"ofType"`
}

// GetKind returns TypeRefOfType.Kind, and is useful for accessing the field via an interface.
func (v *TypeRefOfType) GetKind() TypeKind { return v.Kind }

// GetName returns TypeRefOfType.Name, and is useful for accessing the field via an interface.
func (v *TypeRefOfType) GetName() string { return v.Name }

// GetOfType returns TypeRefOfType.OfType, and is useful for accessing the field via an interface.
func (v *TypeRefOfType) GetOfType() TypeRefOfTypeOfType { return v.OfType }

// TypeRefOfTypeOfType includes the requested fields of the GraphQL type __Type.
type TypeRefOfTypeOfType struct {
	Kind   TypeKind                  `json:"kind"`
	Name   string                    `json:"name"`
	OfType TypeRefOfTypeOfTypeOfType `json:"ofType"`
}

// GetKind returns TypeRefOfTypeOfType.Kind, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfType) GetKind() TypeKind { return v.Kind }

// GetName returns TypeRefOfTypeOfType.Name, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfType) GetName() string { return v.Name }

// GetOfType returns TypeRefOfTypeOfType.OfType, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfType) GetOfType() TypeRefOfTypeOfTypeOfType { return v.OfType }

// TypeRefOfTypeOfTypeOfType includes the requested fields of the GraphQL type __Type.
type TypeRefOfTypeOfTypeOfType struct {
	Kind   TypeKind                        `json:"kind"`
	Name   string                          `json:"name"`
	OfType TypeRefOfTypeOfTypeOfTypeOfType `json:"ofType"`
}

// GetKind returns TypeRefOfTypeOfTypeOfType.Kind, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfTypeOfType) GetKind() TypeKind { return v.Kind }

// GetName returns TypeRefOfTypeOfTypeOfType.Name, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfTypeOfType) GetName() string { return v.Name }

// GetOfType returns TypeRefOfTypeOfTypeOfType.OfType, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfTypeOfType) GetOfType() TypeRefOfTypeOfTypeOfTypeOfType { return v.OfType }

// TypeRefOfTypeOfTypeOfTypeOfType includes the requested fields of the GraphQL type __Type.
type TypeRefOfTypeOfTypeOfTypeOfType struct {
	Kind   TypeKind                              `json:"kind"`
	Name   string                                `json:"name"`
	OfType TypeRefOfTypeOfTypeOfTypeOfTypeOfType `json:"ofType"`
}

// GetKind returns TypeRefOfTypeOfTypeOfTypeOfType.Kind, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfTypeOfTypeOfType) GetKind() TypeKind { return v.Kind }

// GetName returns TypeRefOfTypeOfTypeOfTypeOfType.Name, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfTypeOfTypeOfType) GetName() string { return v.Name }

// GetOfType returns TypeRefOfTypeOfTypeOfTypeOfType.OfType, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfTypeOfTypeOfType) GetOfType() TypeRefOfTypeOfTypeOfTypeOfTypeOfType {
	return v.OfType
}

// TypeRefOfTypeOfTypeOfTypeOfTypeOfType includes the requested fields of the GraphQL type __Type.
type TypeRefOfTypeOfTypeOfTypeOfTypeOfType struct {
	Kind   TypeKind                                    `json:"kind"`
	Name   string                                      `json:"name"`
	OfType TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfType `json:"ofType"`
}

// GetKind returns TypeRefOfTypeOfTypeOfTypeOfTypeOfType.Kind, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfTypeOfTypeOfTypeOfType) GetKind() TypeKind { return v.Kind }

// GetName returns TypeRefOfTypeOfTypeOfTypeOfTypeOfType.Name, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfTypeOfTypeOfTypeOfType) GetName() string { return v.Name }

// GetOfType returns TypeRefOfTypeOfTypeOfTypeOfTypeOfType.OfType, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfTypeOfTypeOfTypeOfType) GetOfType() TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfType {
	return v.OfType
}

// TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfType includes the requested fields of the GraphQL type __Type.
type TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfType struct {
	Kind   TypeKind                                          `json:"kind"`
	Name   string                                            `json:"name"`
	OfType TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfTypeOfType `json:"ofType"`
}

// GetKind returns TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfType.Kind, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfType) GetKind() TypeKind { return v.Kind }

// GetName returns TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfType.Name, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfType) GetName() string { return v.Name }

// GetOfType returns TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfType.OfType, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfType) GetOfType() TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfTypeOfType {
	return v.OfType
}

// TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfTypeOfType includes the requested fields of the GraphQL type __Type.
type TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfTypeOfType struct {
	Kind TypeKind `json:"kind"`
	Name string   `json:"name"`
}

// GetKind returns TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfTypeOfType.Kind, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfTypeOfType) GetKind() TypeKind { return v.Kind }

// GetName returns TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfTypeOfType.Name, and is useful for accessing the field via an interface.
func (v *TypeRefOfTypeOfTypeOfTypeOfTypeOfTypeOfTypeOfType) GetName() string { return v.Name }

func IntrospectionQuery(
	ctx context.Context,
	client graphql.Client,
) (*IntrospectionQueryResponse, error) {
	req := &graphql.Request{
		OpName: "IntrospectionQuery",
		Query: `
query IntrospectionQuery {
	__schema {
		queryType {
			name
		}
		mutationType {
			name
		}
		subscriptionType {
			name
		}
		types {
			... FullType
		}
		directives {
			name
			description
			locations
			args {
				... InputValue
			}
		}
	}
}
fragment FullType on __Type {
	kind
	name
	description
	fields(includeDeprecated: true) {
		name
		description
		args {
			... InputValue
		}
		type {
			... TypeRef
		}
		isDeprecated
		deprecationReason
	}
	inputFields {
		... InputValue
	}
	interfaces {
		... TypeRef
	}
	enumValues(includeDeprecated: true) {
		name
		description
		isDeprecated
		deprecationReason
	}
	possibleTypes {
		... TypeRef
	}
}
fragment InputValue on __InputValue {
	name
	description
	type {
		... TypeRef
	}
	defaultValue
}
fragment TypeRef on __Type {
	kind
	name
	ofType {
		kind
		name
		ofType {
			kind
			name
			ofType {
				kind
				name
				ofType {
					kind
					name
					ofType {
						kind
						name
						ofType {
							kind
							name
							ofType {
								kind
								name
							}
						}
					}
				}
			}
		}
	}
}
`,
	}
	var err error

	var data IntrospectionQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
