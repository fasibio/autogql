// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

func (d *TodoPatch) MergeToType() map[string]interface{} {
	res := make(map[string]interface{})

	if d.Name != nil {
		res["name"] = *d.Name
	}
	if d.Users != nil {
		tmpUsers := make([]map[string]interface{}, len(d.Users))
		for _, v := range d.Users {
			tmp := v.MergeToType()
			tmpUsers = append(tmpUsers, tmp)
		}
		res["users"] = tmpUsers
	}
	return res
}

func (d *TodoInput) MergeToType() Todo {

	tmpName := d.Name
	var tmpUsers []*User
	if d.Users != nil {
		tmpUsers = make([]*User, len(d.Users))
		for _, v := range d.Users {
			tmp := v.MergeToType()
			tmpUsers = append(tmpUsers, &tmp)
		}
	}
	return Todo{
		Name:  tmpName,
		Users: tmpUsers,
	}
}

func (d *UserPatch) MergeToType() map[string]interface{} {
	res := make(map[string]interface{})

	if d.Name != nil {
		res["name"] = *d.Name
	}
	return res
}

func (d *UserInput) MergeToType() User {

	tmpName := d.Name
	return User{
		Name: tmpName,
	}
}
